// Code generated by mockery v0.0.0-dev. DO NOT EDIT.

package mocks

import (
	context "context"
	models "presentation_fluent_testing_2021/models"

	mock "github.com/stretchr/testify/mock"
)

// Sessions is an autogenerated mock type for the Sessions type
type Sessions struct {
	mock.Mock
}

// Authorize provides a mock function with given fields: ctx, email, token
func (_m *Sessions) Authorize(ctx context.Context, email string, token []byte) (models.User, error) {
	ret := _m.Called(ctx, email, token)

	var r0 models.User
	if rf, ok := ret.Get(0).(func(context.Context, string, []byte) models.User); ok {
		r0 = rf(ctx, email, token)
	} else {
		r0 = ret.Get(0).(models.User)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string, []byte) error); ok {
		r1 = rf(ctx, email, token)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateSession provides a mock function with given fields: _a0, _a1
func (_m *Sessions) CreateSession(_a0 context.Context, _a1 models.User) (models.Session, error) {
	ret := _m.Called(_a0, _a1)

	var r0 models.Session
	if rf, ok := ret.Get(0).(func(context.Context, models.User) models.Session); ok {
		r0 = rf(_a0, _a1)
	} else {
		r0 = ret.Get(0).(models.Session)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, models.User) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FindSession provides a mock function with given fields: _a0, _a1
func (_m *Sessions) FindSession(_a0 context.Context, _a1 models.User) models.Session {
	ret := _m.Called(_a0, _a1)

	var r0 models.Session
	if rf, ok := ret.Get(0).(func(context.Context, models.User) models.Session); ok {
		r0 = rf(_a0, _a1)
	} else {
		r0 = ret.Get(0).(models.Session)
	}

	return r0
}
